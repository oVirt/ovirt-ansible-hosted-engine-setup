---
- name: Define he_host_name if not defined
  block:
  - name: Get full hostname
    command: hostname -f
    changed_when: true
    register: host_full_name
  - name: Set he_host_name
    set_fact:
      he_host_name: "{{ host_full_name.stdout_lines[0] }}"
    register: he_host_name
  when: he_host_name is none
- debug: var=he_host_name

- name: Validate host hostname
  block:
  - name: Avoid localhost
    fail:
      msg: >
        localhost is not a valid address
    when: he_host_name in ['localhost', 'localhost.localdomain']
  - name: Get host address resolution
    shell: getent ahosts {{ he_host_name }} | grep {{ he_host_name }}
    register: hostname_resolution_output
    changed_when: True
    ignore_errors: yes
  - debug: var=hostname_resolution_output
  - name: Check address resolution
    fail:
      msg: >
        Unable to resolve address
    when: hostname_resolution_output.rc != 0
  - name: Parse host address resolution
    set_fact:
      r_host_address: "{{ hostname_resolution_output.stdout.split()[0] }}"
  - debug: var=r_host_address
  - name: Ensure host address resolves locally
    fail:
      msg: >
        The address proposed for this host does not resolves locally
    when: r_host_address not in ansible_all_ipv4_addresses | union(ansible_all_ipv6_addresses)
  - name: Ensure the resolved address resolves on the selected interface
    block:
    - name: Get target address from selected interface (IPv4)
      set_fact:
        target_address_v4: "{{
          hostvars[inventory_hostname]['ansible_' + he_mgmt_network.replace('-','_')]['ipv4']['address']
            if 'ansible_' + he_mgmt_network.replace('-','_') in hostvars[inventory_hostname] and
              'ipv4' in hostvars[inventory_hostname]['ansible_' + he_mgmt_network.replace('-','_')]
          else
          hostvars[inventory_hostname]['ansible_' + he_bridge_if.replace('-','_')]['ipv4']['address']
            if 'ansible_' + he_bridge_if.replace('-','_') in hostvars[inventory_hostname] and
              'ipv4' in hostvars[inventory_hostname]['ansible_' + he_bridge_if.replace('-','_')]
          else
          None
        }}"
    - debug: var=target_address_v4
    - name: Get target address from selected interface (IPv6)
      set_fact:
        target_address_v6_list: "{{
          hostvars[inventory_hostname]['ansible_' + he_mgmt_network.replace('-','_')]['ipv6'] | map(attribute='address') | list
            if 'ansible_' + he_mgmt_network.replace('-','_') in hostvars[inventory_hostname] and
              'ipv6' in hostvars[inventory_hostname]['ansible_' + he_mgmt_network.replace('-','_')]
          else
          hostvars[inventory_hostname]['ansible_' + he_bridge_if.replace('-','_')]['ipv6'] | map(attribute='address') | list
            if 'ansible_' + he_bridge_if.replace('-','_') in hostvars[inventory_hostname] and
              'ipv6' in hostvars[inventory_hostname]['ansible_' + he_bridge_if.replace('-','_')]
          else
          []
        }}"
    - debug: var=target_address_v6_list
    - name: Check the resolved address resolves on the selected interface
      fail:
        msg: >
          The resolved address doesn't resolve
          on the selected interface
      when: r_host_address != target_address_v4 and r_host_address not in target_address_v6_list
    - name: Check for alias
      shell: getent ahosts {{ he_host_name }} | cut -d' ' -f1 | uniq
      register: hostname_res_count_output
      changed_when: True
      ignore_errors: yes
    - debug: var=hostname_res_count_output
    - name: Ensure the resolved address resolves only on the selected interface
      fail:
        msg: >
          hostname '{{ he_host_name }}' doesn't uniquely match the interface
          '{{ he_bridge_if }}' selected for the management bridge;
          it matches also interface with IP {{ hostname_res_count_output.stdout_lines | difference([r_host_address,]) }}.
          Please make sure that the hostname got from
          the interface for the management network resolves
          only there.
      when: hostname_res_count_output.stdout_lines|length > 1
    when: he_bridge_if is defined and he_mgmt_network is defined
  when: he_host_name is defined and he_host_name is not none
- name: Validate engine he_fqdn
  block:
  - name: Avoid localhost
    fail:
      msg: >
        localhost is not a valid he_fqdn for the engine VM
    when: he_fqdn in ['localhost', 'localhost.localdomain']
  - name: Get engine FQDN resolution
    shell: getent ahosts {{ he_fqdn }} | grep STREAM
    environment: "{{ he_cmd_lang }}"
    register: fqdn_resolution_output
    changed_when: True
    ignore_errors: yes
  - debug: var=fqdn_resolution_output
  - name: Check engine he_fqdn resolution
    fail:
      msg: >
        Unable to resolve address
    when: fqdn_resolution_output.rc != 0
  - name: Parse engine he_fqdn resolution
    set_fact:
      r_fqdn_address: "{{ fqdn_resolution_output.stdout.split()[0] }}"
  - debug: var=r_fqdn_address
  - name: Ensure engine he_fqdn doesn't resolve locally
    fail:
      msg: >
        The he_fqdn proposed for the engine VM resolves on this host
    when: r_fqdn_address in ansible_all_ipv4_addresses | union(ansible_all_ipv6_addresses)
  - name: Check http/https proxy
    fail:
      msg: >
        Your system is configured to use a proxy, please
        add an exception for {{ url }} with no_proxy directive.
    when: url is proxied
    loop_control:
      loop_var: url
    with_items:
      - "http://{{ he_fqdn }}/"
      - "https://{{ he_fqdn }}/"
  when: he_fqdn is defined and he_fqdn is not none

