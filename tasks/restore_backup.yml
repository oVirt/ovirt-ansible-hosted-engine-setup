---
- name: Copy the backup file to the engine VM for restore
  copy:
    src: "{{ he_restore_from_file }}"
    dest: /root/engine_backup
    owner: root
    group: root
    mode: 0600
- name: Run engine-backup
  shell: >-
    engine-backup --mode=restore
    --log=/var/log/ovirt-engine/setup/restore-backup-$(date -u +%Y%m%d%H%M%S).log
    --file=/root/engine_backup --provision-all-databases --restore-permissions
  environment: "{{ he_cmd_lang }}"
  register: engine_restore_out
  changed_when: true
- debug: var=engine_restore_out
- name: Remove backup file
  file:
    state: absent
    path: /root/engine_backup
- include_tasks: pg_scl.yml
- name: Remove previous hosted-engine VM
  command: >-
    {{ scl_pg_prefix }} psql -d engine -c "SELECT deletevm(vm_guid) FROM (SELECT vm_guid FROM vms WHERE origin=6) t"
  environment: "{{ he_cmd_lang }}"
  become: true
  become_user: postgres
  become_method: sudo
  changed_when: true
  register: db_remove_old_enginevm
- name: Update dynamic data for VMs on the host used to redeploy
  command: >-
    {{ scl_pg_prefix }} psql -d engine -c
    "UPDATE vm_dynamic SET run_on_vds = NULL, status=0 /* Down */ WHERE run_on_vds IN
    (SELECT vds_id FROM vds
    WHERE upper(vds_unique_id)=upper('{{ hostvars[he_ansible_host_name]['unique_id_out']['stdout_lines']|first }}'))"
  environment: "{{ he_cmd_lang }}"
  become: true
  become_user: postgres
  become_method: sudo
  changed_when: true
  register: db_update_host_vms
- debug: var=db_update_host_vms
- name: Update dynamic data for VMs migrating to the host used to redeploy
  command: >-
    {{ scl_pg_prefix }} psql -d engine -c
    "UPDATE vm_dynamic SET migrating_to_vds = NULL, status=0 /* Down */ WHERE migrating_to_vds IN
    (SELECT vds_id FROM vds WHERE
    upper(vds_unique_id)=upper('{{ hostvars[he_ansible_host_name]['unique_id_out']['stdout_lines']|first }}'))"
  environment: "{{ he_cmd_lang }}"
  become: true
  become_user: postgres
  become_method: sudo
  changed_when: true
  register: db_update_host_migrating_vms
- debug: var=db_update_host_migrating_vms
- name: Remove host used to redeploy
  command: >-
    {{ scl_pg_prefix }} psql -d engine -c
    "SELECT deletevds(vds_id) FROM
    (SELECT vds_id FROM vds WHERE
    upper(vds_unique_id)=upper('{{ hostvars[he_ansible_host_name]['unique_id_out']['stdout_lines']|first }}')) t"
  environment: "{{ he_cmd_lang }}"
  become: true
  become_user: postgres
  become_method: sudo
  changed_when: true
  register: db_remove_he_host
- debug: var=db_remove_he_host
- name: Rename previous HE storage domain to avoid name conflicts
  command: >-
    {{ scl_pg_prefix }} psql -d engine -c
    "UPDATE storage_domain_static SET
    storage_name='{{ he_storage_domain_name }}_old_{{ ansible_date_time.iso8601_basic_short }}' WHERE
    storage_name='{{ he_storage_domain_name }}'"
  environment: "{{ he_cmd_lang }}"
  become: true
  become_user: postgres
  become_method: sudo
  changed_when: true
  register: db_rename_he_sd
- debug: var=db_rename_he_sd
- name: Save original DisableFenceAtStartupInSec
  shell: "engine-config -g DisableFenceAtStartupInSec | cut -d' ' -f2 > /root/DisableFenceAtStartupInSec.txt"
  environment: "{{ he_cmd_lang }}"
  changed_when: true
- name: Update DisableFenceAtStartupInSec to prevent host fencing during the recovery
  command: "engine-config -s DisableFenceAtStartupInSec=86400"
  environment: "{{ he_cmd_lang }}"
  changed_when: true
